heat_template_version: 2015-04-30
description: "Sets up a hadoop-spark cluster"

parameters:
  num-slaves:
    type: number
    label: Number of slave nodes
    description: Number of slave nodes for your cluster
    default: 1
  master-image:
    type: string
    label: Master Node Image
    description: ID or name of the image to use for the master node
    constraints:
      - custom_constraint: glance.image
    default: ubuntu-server-14.04-amd64
  master-flavor:
    type: string
    label: Master Node Flavor
    description: Hardware flavor to be used for the master node
    constraints:
      - custom_constraint: nova.flavor
    default: c1-7.5gb-30
  slave-image:
    type: string
    label: Slave Node Image
    description: ID or name of the image to use for the slave nodes
    constraints:
      - custom_constraint: glance.image
    default: ubuntu-server-14.04-amd64
  slave-flavor:
    type: string
    label: Slave Node Flavor
    description: Hardware flavor to be used for the slave nodes
    constraints:
      - custom_constraint: nova.flavor
    default: c1-7.5gb-30
  key:
    type: string
    label: Key-pair name
    description: Name of key-pair to be used for master and slave nodes
    default: thekey
    constraints:
      - custom_constraint: nova.keypair
  private_network:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    constraints:
      - custom_constraint: neutron.network
  public_network:
    type: string
    description: Network pool to use for obtaining public IP
    label: Public Network
    default: VLAN3337
resources:
  hs-master:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: master-flavor}
      image: {get_param: master-image}
      key_name: {get_param: key}
      name: hs-master
      networks:
        - port: {get_resource: hs-master_port}
      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: https://raw.githubusercontent.com/cgeroux/heat-hadoop-spark/file_inclusions/ci-master.yaml }
          params:
            MASTERNAME: hs-master
            SLAVENAMEBASE: hs-slave-
            NUMSLAVES: {get_param: num-slaves}
            wc_notify: {get_attr: ['master_wait_handle','curl_cli']}
  hs-master_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: private_network}
      security_groups: [{get_resource: hs-ssh},{get_resource: hs-name-node},{get_resource: hs-yarn},default]
  hs-ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      name: hs-ssh
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
  hs-name-node:
    type: OS::Neutron::SecurityGroup
    properties:
      name: hs-name-node
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 50070
          port_range_max: 50070
  hs-yarn:
    type: OS::Neutron::SecurityGroup
    properties:
      name: hs-name-node
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8088
          port_range_max: 8088
  hs-master_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      port_id: {get_resource: hs-master_port}
      floating_network: {get_param: public_network}
  slave_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: num-slaves}
      resource_def:
        type: OS::Nova::Server
        properties:
          name: hs-slave-%index%
          flavor: {get_param: slave-flavor}
          image: {get_param: slave-image}
          key_name: {get_param: key}
          networks: 
            - network: {get_param: private_network}
          user_data_format: RAW
          user_data:
            str_replace:
              template: { get_file: https://raw.githubusercontent.com/cgeroux/heat-hadoop-spark/file_inclusions/ci-slave.yaml }
              params:
                IPTOREPLACE: { get_attr: [hs-master, first_address] }
                wc_notify: {get_attr: ['slave_group_wait_handle','curl_cli']}
  master_wait_handle:
    type: OS::Heat::WaitConditionHandle
  slave_group_wait_handle:
    type: OS::Heat::WaitConditionHandle
  master_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: master_wait_handle}
      count: 1
      timeout: 1200
  slave_group_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: slave_group_wait_handle}
      count: {get_param: num-slaves}
      timeout: 1200
outputs:
  public_ip:
    description: Floating IP address of hs-master in public network, can be used to ssh into master node
    value: { get_attr: [ hs-master_floating_ip, floating_ip_address ] }
  node_info_url:
    description: Link to hdfs node information
    value:
      str_replace:
        template: http://<hostip>:50070
        params:
          <hostip>: { get_attr: [ hs-master_floating_ip, floating_ip_address ] }
  yarn_url:
    description: Link to yarn job page
    value:
      str_replace:
        template: http://<hostip>:8088
        params:
          <hostip>: { get_attr: [ hs-master_floating_ip, floating_ip_address ] }